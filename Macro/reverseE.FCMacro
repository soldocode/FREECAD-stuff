########################################################################
#                                                                      #
#  Riccardo Soldini - riccardo.soldini@gmail.com                       #
#                                                                      #
#  reversE.py - 2017                                                   #
#                                                                      #
#  Modulo per la decostruzione di parti di carpenteria da file STEP    #
#  e generazione del processo di costruzione                           #
#                                                                      #
########################################################################


import pprint
pp = pprint.PrettyPrinter(indent=4)

sel=Gui.Selection.getSelectionEx()[0]
faces=sel.Object.Shape.Faces

c_surf={}
p_surf={}
b_part=[]	
faces_tree={"Plane":{},
            "Cylinder":{},
            "Cone":{}}

fnum=len(faces)
print ('Number of faces:',fnum)

### create color tree
actcolor=sel.Object.ViewObject.DiffuseColor[0]
dcol=[]
for i in range (0,fnum):
    dcol.append(actcolor)

### Build faces's tree
for i in range(0,len(faces)):
    str_face=faces[i].Surface.__str__()
    if str_face=="<Cylinder object>":
        print ("Cylinder",i," - center:",faces[i].Surface.Center)
        c_surf[i]=faces[i]
        faces_tree['Cylinder'][i]=faces[i]
    elif str_face=="<Plane object>":
        print ("Plane",i," - number of edges:",len(faces[i].Edges))
        p_surf[i]=faces[i]	
        faces_tree['Plane'][i]=faces[i]
    elif str_face=="<Cone object>":
        print ("Cone",i," - center",faces[i].Surface.Center)
        faces_tree['Cone'][i]=faces[i]

pp.pprint(faces_tree) 



### Find Parallel Faces	
parallel_planes=[]   
planes= dict(faces_tree['Plane']).items()
while len(planes)>0:
    p=planes.pop(0)
    collect=[p]
    
    norm=p[1].normalAt(0,0)
    ax=abs(norm.x)
    ay=abs(norm.y)
    az=abs(norm.z)
    print('looking for paralles faces normal on ',ax,ay,az)
    
    i=0
    len_planes=len(planes)
    print('len planes',len_planes)
    while len_planes>0 and i<len_planes:
         print('i:',i)
         inorm=p[1].normalAt(0,0)
         ax=abs(inorm.x)
         ay=abs(inorm.y)
         az=abs(inorm.z)
         
         if iax==ax and iay==ay and iaz==az:
             print('found!!!')
             c=planes.pop(i)
             collect.append(c)
             len_planes=len(planes)
         else:
             i=i+1 
             len_planes=len(planes)
             

    parallel_planes.append(collect)   

pp.pprint(parallel_planes)       
   

### find distance from opposit faces

for opp in parallel_planes:
    if len(opp)>1:
       d=opp[0][1].distToShape(opp[1][1])[0]
       print (d)


### to be done............	
c_list=[]
for i in c_surf: 
	c_list.append(i)

while len(c_list)>1:
    blend=c_list.pop()
    not_found=True
    ind=0
    while ind<len(c_list) and not_found:
       c1=faces[blend]
       c2=faces[c_list[ind]]
       thickness=c1.Surface.Radius-c2.Surface.Radius

       cc1=c1.Surface.Center
       cc2=c2.Surface.Center 
       equal_center=(round(cc1.x, 2)==round(cc2.x, 2)) and (round(cc1.y, 2)==round(cc2.y, 2)) and (round(cc1.z, 2)==round(cc2.z, 2))
       if (equal_center) and (thickness!=0):
       	  print 'Face',blend,' with Face',c_list[ind],' thickness:',thickness

          dcol[c_list[ind]]=(1.,0.,1.)
          dcol[blend]=(1.,0.,1.)

          # save in blend part
          b_part.append(dict(radius1=blend,radius2=c_list[ind]))
          not_found=False
          del c_list[ind]

          # find faces adjacent
          #edges=blend["face"].Edges
          #for e in edges:
          #  print('edges: ',e.Curve.__class__.__name__)
          #  if e.Curve.__class__.__name__=='GeomLineSegment':
          #     e_link=e
          #     for psi in p_surf:             
          #         for pse in psi["face"].Edges:
          #             if pse==e_link:
		  #			   print('Found linked Surface')     

       ind=ind+1

sel.Object.ViewObject.DiffuseColor=dcol
print b_part
